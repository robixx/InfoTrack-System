@{
    ViewBag.pTitle = "Profile Configure";
    ViewBag.pageTitle = "InfoTrack";
    ViewBag.Title = "Profile Configure";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

@section styles {
    <!-- jquery.vectormap css -->
    <link href="~/libs/admin-resources/jquery.vectormap/jquery-jvectormap-1.2.2.css" rel="stylesheet" type="text/css" />

    <!-- DataTables -->
    <link href="~/libs/datatables.net-bs4/css/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <link href="~/libs/datatables.net-buttons-bs4/css/buttons.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <link href="~/libs/datatables.net-select-bs4/css//select.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <!-- Responsive datatable examples -->
    <link href="~/libs/datatables.net-responsive-bs4/css/responsive.bootstrap4.min.css" rel="stylesheet" type="text/css" />

}
<style>
   

    .list-group-item {
        border: none;
        padding: 0.75rem 1.25rem;
        background-color: #fff;
        border-radius: 0.375rem; /* Bootstrap's rounded-3 */
        margin-bottom: 5px;
        transition: background-color 0.15s ease-in-out; /* Smooth transition for hover/active */
    }
    /* Styling for the selected item */
    .selectable-item.active {
        background-color: #e9ecef; /* Light gray for active/selected */
        color: #212529; /* Dark text for active */
        font-weight: 600; /* Make active text bolder */
    }

    .selectable-item:hover {
        background-color: #e9ecef; /* Hover effect for selectable items */
        cursor: pointer;
    }

    .list-group-item-level-1 {
        border-bottom: 1px solid #dee2e6; /* Light border for main items */
        font-weight: 600;
        background-color: #ffffff; /* Slightly darker background for main level */
    }

    .list-group-item-level-2 {
        padding-left: 2.5rem; /* Indent sub-branches */
        background-color: #f8f9fa; /* Lighter background */
        border-left: 1px solid #950c1a !important;
    }

    .list-group-item-level-2:hover {
            background: #fbfdf9;
    }

    .list-group-item-level-3 {
        padding-left: 3.5rem; /* Indent areas */
        background-color: #ffffff;
        border-left: 1px solid #950c1a !important;
        
    }

    .list-group-item-level-3:hover {
            background: #f5f0fb;
    }

    .list-group-item-level-4 {
        padding-left: 2.6rem; /* Indent districts */
        background-color: #f8f9fa;
        border-left: 1px solid #950c1a !important;
        
    }

    .list-group-item-level-4:hover {
            background: #f1f9f6;
        
    }
    
    .list-group-item-level-5 {
        padding-left: 5.2rem; /* Indent divisions */
        background-color: #ffffff;
        border-left: 1px solid #950c1a !important;
        
    }

        .list-group-item-level-5:hover{
            background: #e3eaf5;
            
        }
    .collapse-toggle {
        color: #007bff; /* Primary blue for toggle icon */
        transition: transform 0.2s ease-in-out;
        cursor: pointer; /* Indicate it's clickable */
        padding: 0.25rem; /* Make it easier to click */
    }

        .collapse-toggle.rotated {
            transform: rotate(90deg);
        }

    .list-group-flush .list-group-item {
        border-width: 0 0 1px;
        border-color: #e9ecef;
        border-radius: 0;
    }

        .list-group-flush .list-group-item:last-child {
            border-bottom-width: 0;
        }

    .card-header-custom {
        background-color:white; /* Primary blue header */
        color: black;
        font-weight: bold;
        padding: 1rem 1.25rem;
        border-bottom: 1px solid rgba(0,0,0,.125);
        border-top-left-radius: 0.375rem;
        border-top-right-radius: 0.375rem;
    }

    .texts-primary {
        --bs-text-opacity: 1;
        color: rgb(149 12 26) !important;
    }
    /* Style for radio button to align it better */
    .branch-radio {
        margin-right: 0.75rem; /* Space between radio and text */
        transform: scale(1.1); /* Slightly larger radio button */
    }

    .card {
        margin-bottom: 0.4rem;
    }

    .card-header {
        background-color: white !important;
    }

    .bg-color {
        background-color: #5664d2;
    }

        .bg-color:hover {
            background-color: #5664d2;
            color: white;
        }


    table#datatable > tbody > tr > td {
        padding: 6px;
        font-size: 12px;
    }

</style>

<div class="row">
    <div class="col-xl-12">
        <div id="noticeMessage" class="alert alert-dismissible fade d-none" role="alert">
            <span id="noticeText"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        <div class=" mt-2">
            <!-- Main Content -->
            <div class="row">
                <!-- Add New Item Form -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h5><i class="fa fa-plus"></i> Add New Item</h5>
                        </div>
                        <div class="card-body">
                            <form id="addItemForm">
                                <div class="mb-3">
                                    <label class="form-label">Type <span style="color:red;">*</span></label>
                                    <select class="form-select" id="itemType" required disabled>
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Parent</label>
                                    <select class="form-select" id="parentSelect" disabled>
                                        <option value="0">No Parent (Root Lebel)</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Parent</label>
                                    <input class="form-control" value="1" name="orderview" id="orderview" type="number" min="1" disabled />
                                </div>

                                <button type="button" class="btn btn-secondary btn-sm" 
                                        onclick="clearForm()" disabled>
                                    <i class="fa fa-times"></i>   Clear Form
                                </button>
                                <button type="submit" class="btn btn-primary btn-sm" disabled>
                                    <i class="fa fa-plus"></i> Add Item
                                </button>

                            </form>
                        </div>
                    </div>
                </div>

                <!-- Hierarchy Display -->
                <div class="col-md-8">

                    <div class="container-fluid  shadow-lg rounded-3 bg-white">
                        <div class="card border-0">
                            <div class="card-header-custom">
                                Organizational Hierarchy
                            </div>
                            <div class="card-body p-0">
                                <ul class="list-group list-group-flush" id="hierarchy-tree-root">
                                    <!-- Tree will be dynamically loaded here by JavaScript -->
                                </ul>
                            </div>
                        </div>                      
                    </div>
                </div>
            </div>

        </div>
        <!-- end row -->
    </div>
</div>


<div id="messageBoxOverlay" class="message-box-overlay" style="display: none;">
    <div class="message-box">
        <h5 id="messageBoxTitle">Selected Item</h5>
        <p id="messageBoxContent"></p>
        <button class="btn btn-primary" onclick="document.getElementById('messageBoxOverlay').style.display = 'none';">Close</button>
    </div>
</div>

@section scripts {
    <!-- apexcharts -->
    <!-- jquery.vectormap map -->
    <script src="~/libs/admin-resources/jquery.vectormap/jquery-jvectormap-1.2.2.min.js"></script>
    <script src="~/libs/admin-resources/jquery.vectormap/maps/jquery-jvectormap-us-merc-en.js"></script>
    <!-- Required datatable js -->
    <script src="~/libs/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="~/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"></script>
    <!-- Buttons examples -->
    <script src="~/libs/datatables.net-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/libs/datatables.net-buttons-bs4/js/buttons.bootstrap4.min.js"></script>
    <script src="~/libs/jszip/jszip.min.js"></script>
    <script src="~/libs/pdfmake/build/pdfmake.min.js"></script>
    <script src="~/libs/pdfmake/build/vfs_fonts.js"></script>
    <script src="~/libs/datatables.net-buttons/js/buttons.html5.min.js"></script>
    <script src="~/libs/datatables.net-buttons/js/buttons.print.min.js"></script>
    <script src="~/libs/datatables.net-buttons/js/buttons.colVis.min.js"></script>
    <script src="~/libs/datatables.net-keytable/js/dataTables.keyTable.min.js"></script>
    <script src="~/libs/datatables.net-select/js/dataTables.select.min.js"></script>
    <!-- Responsive examples -->
    <script src="~/libs/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"></script>
    <!-- Datatable init js -->
    <script src="~/js/pages/datatables.init.js"></script>
    <script src="~/js/app.js"></script>


}

<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script>

     let hierarchyData=[];
     let levelList=[];
     LoadType();
    

     function  LoadtypeHierarchy()
     {
           fetch('/Configuration/Configuration/Gethierarchy')
            .then(res => res.json())
            .then(data => {

               if (!data || Object.keys(data).length === 0) {

                hierarchyData = [];
                } else {
                    hierarchyData = data;                    
                    LoadDesign(hierarchyData);
                    
                }
            });
     }


     function LoadDesign(hierarchyData){
          document.getElementById('hierarchy-tree-root').innerHTML = buildHierarchyTree(hierarchyData);
                    setupCollapseToggles();
                    setupSingleSelection();
            
     } 

    
    function LoadType()
    {

         $.ajax({
             url:"/Configuration/Configuration/GetLoadType",
             type:"GET",
             contentType: 'application/json',
             success: function (res){
                 if(res.group.length>0){
                     
                     const pdropdown = $('#parentSelect');
                     pdropdown.empty();
                     const dropdown = $('#itemType');
                     dropdown.empty();
                     dropdown.append('<option value="0">-- Select Type --</option>');
                     pdropdown.append('<option value="0">No Parent (Root Level)</option>');
                     res.group.forEach(item => {
                         dropdown.append(`<option value="${item.value}">${item.text}</option>`);
                         pdropdown.append(`<option value="${item.value}">${item.text}</option>`);
                     });
                 }else{
                     const dropdown = $('#itemType');
                     dropdown.empty();
                     dropdown.append('<option value="0">-- Select Type --</option>');
                     const pdropdown = $('#parentSelect');
                     pdropdown.empty();
                     pdropdown.append('<option value="0">No Parent (Root Level)</option>');
                 }

             }
         });

    }


        document.getElementById('addItemForm').addEventListener('submit', function() {
             const itemname = document.getElementById('itemType')
             const typename = itemname.options[itemname.selectedIndex].text;
             const typeid=itemname.value.trim(); // this type id
             const type=typename.split(' ')[0];
             const parentId = document.getElementById('parentSelect').value || null;
             const order = document.getElementById('orderview').value;
             debugger;
             if (!type || type==null) {
                showAlert('Please fill in required fields', 'warning');
                return;
             }
            
            Save( typeid, parentId,order,type);
        });


    function Save( typeid, parentid,order,type)
    {
        
        var data={
            TypeId:typeid,
            parentid:parentid,
            typeName:type,
            OrderView:order,
        };
       $.ajax({
             url:"/Configuration/Configuration/SaveLevelLoadRootData",
             type:"POST",
             contentType: 'application/json',
             data:JSON.stringify(data),
             success: function (res){
                 debugger;
                if(res.status){
                    showAlert(res.message,'success');
                }else{
                    debugger;
                  showAlert(res.message, 'warning');
                }

             }
         });
    }
    const typeIcons = {
        Branch: 'fas fa-code-branch',
        SubBranch: 'fas fa-sitemap',
        District: 'fas fa-city',
        Division: 'fas fa-building',
        Booth: 'fas fa-map-marker-alt'
    };
     
        // Function to recursively build the hierarchy tree
        function buildHierarchyTree(data, level = 1) {
            
            let html = '';
            const levelClass = `hoveritems list-group-item-level-${level}`;

            data.forEach(item => {
                const hasChildren = item.children && item.children.length > 0;
                const collapseId = `collapse-${item.id}`;
                const radioId = `radio-${item.id}`; // Unique ID for radio button

                html += `
                    <li class="list-group-item ${levelClass}">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center flex-grow-1">
                                ${item.type === 'Branch' ? `<input class="form-check-input branch-radio" checked type="radio" name="hierarchy-selection" id="${radioId}">` : ''}
                                <span class="text-decoration-none text-dark selectable-item" data-target-radio="${radioId}">
                                    <i class="${typeIcons[item.type]} me-3 texts-primary"></i> ${item.type}  : ${item.name}
                                </span>
                            </div>
                            ${hasChildren ? `<i class="fas fa-chevron-right collapse-toggle" data-bs-toggle="collapse" data-bs-target="#${collapseId}"></i>` : ''}
                        </div>
                        ${hasChildren ? `
                            <div class="collapse" id="${collapseId}">
                                <ul class="list-group list-group-flush mt-2">
                                    ${buildHierarchyTree(item.children, level + 1)}
                                </ul>
                            </div>
                        ` : ''}
                    </li>
                `;
            });
            return html;
        }

        // JavaScript to handle the rotation of the chevron icon
        function setupCollapseToggles() {
            document.querySelectorAll('.collapse-toggle').forEach(toggle => {
                const targetId = toggle.getAttribute('data-bs-target');
                const targetCollapse = document.querySelector(targetId);

                if (targetCollapse) {
                    // Remove existing listeners to prevent duplicates if function is called multiple times
                    const oldShowHandler = toggle._showHandler;
                    const oldHideHandler = toggle._hideHandler;
                    if (oldShowHandler) targetCollapse.removeEventListener('show.bs.collapse', oldShowHandler);
                    if (oldHideHandler) targetCollapse.removeEventListener('hide.bs.collapse', oldHideHandler);

                    const newShowHandler = () => toggle.classList.add('rotated');
                    const newHideHandler = () => toggle.classList.remove('rotated');

                    targetCollapse.addEventListener('show.bs.collapse', newShowHandler);
                    targetCollapse.addEventListener('hide.bs.collapse', newHideHandler);

                    // Store handlers to remove them later if needed
                    toggle._showHandler = newShowHandler;
                    toggle._hideHandler = newHideHandler;
                }
            });
        }


        // JavaScript for single item selection across all selectable elements
        function setupSingleSelection() {
            const allSelectableItems = document.querySelectorAll('.selectable-item');
            const allRadioButtons = document.querySelectorAll('.branch-radio');

            function clearAllSelections() {
                allSelectableItems.forEach(item => {
                    item.classList.remove('active');
                });
                allRadioButtons.forEach(radio => {
                    radio.checked = false;
                });
            }

            // Remove existing event listeners to prevent duplicates
            allSelectableItems.forEach(item => {
                if (item._clickHandler) {
                    item.removeEventListener('click', item._clickHandler);
                }
            });
            allRadioButtons.forEach(radio => {
                if (radio._changeHandler) {
                    radio.removeEventListener('change', radio._changeHandler);
                }
            });


            allSelectableItems.forEach(item => {
                const clickHandler = function(event) {
                    event.stopPropagation(); // Prevent propagation to parent elements

                    const targetRadioId = this.getAttribute('data-target-radio');
                    const associatedRadio = targetRadioId ? document.getElementById(targetRadioId) : null;

                    if (event.target === associatedRadio) {
                        return; // If the radio itself was the direct target, let its change event handle it.
                    }

                    clearAllSelections();
                    this.classList.add('active');
                    if (associatedRadio) {
                        associatedRadio.checked = true;
                    }
                };
                item.addEventListener('click', clickHandler);
                item._clickHandler = clickHandler; // Store handler for removal
            });

            allRadioButtons.forEach(radio => {
                const changeHandler = function(event) {
                    event.stopPropagation(); // Prevent propagation

                    clearAllSelections();
                    const associatedSelectableItem = document.querySelector(`.selectable-item[data-target-radio="${this.id}"]`);
                    if (associatedSelectableItem) {
                        associatedSelectableItem.classList.add('active');
                    }
                    this.checked = true; // Ensure the current radio is checked
                };
                radio.addEventListener('change', changeHandler);
                radio._changeHandler = changeHandler; // Store handler for removal
            });
        }


        // Function to get the currently selected item's text
        function getSelectedHierarchyItemText() {
            const activeItem = document.querySelector('.selectable-item.active');
            if (activeItem) {
                // Clone the node to remove the icon before getting textContent
                const clonedItem = activeItem.cloneNode(true);
                // Remove the icon element if it exists
                const icon = clonedItem.querySelector('i.fas');
                if (icon) {
                    icon.remove();
                }
                return clonedItem.textContent.trim();
            }
            return null;
        }

        // Event listener for the "Get Selected Item Data" button
        document.addEventListener('DOMContentLoaded', () => {
           
           
            const messageBoxOverlay = document.getElementById('messageBoxOverlay');
            const messageBoxContent = document.getElementById('messageBoxContent');
           
            LoadtypeHierarchy();
           
               
        });




     function showAlert(message, type) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(alertDiv);

        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.parentNode.removeChild(alertDiv);
            }
        }, 4000);
    }
</script>