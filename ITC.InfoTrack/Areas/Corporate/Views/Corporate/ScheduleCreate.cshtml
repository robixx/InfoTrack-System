@{
    ViewBag.pTitle = "Schedule Create";
    ViewBag.pageTitle = "InfoTrack";
    ViewBag.Title = "Schedule Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

}
@section styles {
    <!-- jquery.vectormap css -->
    <link href="~/libs/select2/css/select2.min.css" rel="stylesheet" type="text/css">
    <link href="~/libs/admin-resources/jquery.vectormap/jquery-jvectormap-1.2.2.css" rel="stylesheet" type="text/css" />
    <link href="~/libs/bootstrap-datepicker/css/bootstrap-datepicker.min.css" rel="stylesheet">
    <link href="~/libs/spectrum-colorpicker2/spectrum.min.css" rel="stylesheet" type="text/css">
    <link href="~/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css" rel="stylesheet">
    <!-- DataTables -->
    <link href="~/libs/datatables.net-bs4/css/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <link href="~/libs/datatables.net-buttons-bs4/css/buttons.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <link href="~/libs/datatables.net-select-bs4/css/select.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <!-- Responsive datatable examples -->
    <link href="~/libs/datatables.net-responsive-bs4/css/responsive.bootstrap4.min.css" rel="stylesheet" type="text/css" />

}
<style>
    :root {
        --citybank-blue: #4550a8;
        --citybank-light-blue: #e6f0f7;
        --citybank-text-dark: #212529;
        --citybank-text-muted: #6c757d;
    }



    .header-section {
        background-color: #ffffff;
        border-bottom: 1px solid #e9ecef;
        padding: 1rem 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        position: sticky;
        top: 0;
        z-index: 1000;
    }

    .main-container {
        flex-grow: 1;
        padding: 1.5rem 0;
    }

    .card {
        border-radius: 0.75rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }


    .btn-citybank-primary {
        background-color: var(--citybank-blue);
        color: #fff;
        border-color: var(--citybank-blue);
        transition: background-color 0.2s ease, border-color 0.2s ease;
    }

        .btn-citybank-primary:hover {
            background-color: #003a6b;
            border-color: #003a6b;
            color: #fff;
        }

        .btn-citybank-primary:focus, .btn-citybank-primary.focus {
            box-shadow: 0 0 0 0.25rem rgba(0, 75, 141, 0.25);
        }


    .calendar-header {
        background-color: var(--citybank-blue);
        color: #fff;
        border-top-left-radius: 0.75rem;
        border-top-right-radius: 0.75rem;
        padding: 0.4rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .calendar-header button {
            background: none;
            border: none;
            color: #fff;
            font-size: 1.25rem;
        }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 1px;
        background-color: #e9ecef;
        padding: 1px; /* Overall padding for the grid lines */
        border-bottom-left-radius: 0.75rem;
        border-bottom-right-radius: 0.75rem;
        overflow: hidden; /* Ensures rounded corners are applied */
    }

    .calendar-day-header {
        background-color: #f8f9fa;
        font-weight: 600;
        text-align: center;
        padding: 0.75rem 0.25rem;
        font-size: 0.875rem;
        color: var(--citybank-text-dark);
    }

    .calendar-cell {
        background-color: #ffffff;
        min-height: 80px; /* Minimum height for calendar cells */
        padding: 0.5rem;
        text-align: right;
        position: relative;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.1s ease;
        font-size: 0.875rem;
        color: var(--citybank-text-dark);
    }

        .calendar-cell:hover {
            background-color: #f5f5f5;
            transform: translateY(-2px);
        }

        .calendar-cell.inactive {
            color: #adb5bd; /* Lighter color for days outside current month */
            background-color: #f1f2f4;
            pointer-events: none; /* Disable interaction */
        }

        .calendar-cell.has-event .event-dot {
            position: absolute;
            bottom: 5px;
            left: 50%;
            transform: translateX(-50%);
            width: 8px;
            height: 8px;
            background-color: var(--citybank-blue); /* Event indicator */
            border-radius: 50%;
        }

        .calendar-cell.current-day {
            border: 2px solid var(--citybank-blue); /* Highlight current day */
            z-index: 1; /* Ensure border is visible */
        }

        .calendar-cell.selected-day {
            background-color: var(--citybank-light-blue); /* Lighter blue for selected day */
            border: 1px solid var(--citybank-blue);
        }

    /* Visit List Styling */
    .visit-list {
        max-height: 600px; /* Fixed height for scrollable list */
        overflow-y: auto;
        padding-right: 0.5rem; /* Space for scrollbar */
    }
        /* Custom scrollbar for visit list */
        .visit-list::-webkit-scrollbar {
            width: 8px;
        }

        .visit-list::-webkit-scrollbar-thumb {
            background-color: #ced4da;
            border-radius: 4px;
        }

        .visit-list::-webkit-scrollbar-track {
            background-color: #f8f9fa;
        }

    .visit-card {
        margin-bottom: 1rem;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        cursor: pointer;
    }

        .visit-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        }

        .visit-card .badge {
            font-size: 0.75rem;
            padding: 0.4em 0.7em;
            border-radius: 0.5rem;
        }

    .visit-card-time {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--citybank-text-dark);
    }

    .visit-card-title {
        font-size: 1rem;
        font-weight: 500;
        color: var(--citybank-text-dark);
    }

    .visit-card-subtitle {
        font-size: 0.875rem;
        color: var(--citybank-text-muted);
    }

    .visit-card-actions button {
        padding: 0.3rem 0.5rem;
        font-size: 0.8rem;
        margin-left: 0.5rem;
    }

    .visit-card-actions .btn-danger {
        background-color: #dc3545; /* Bootstrap red */
        border-color: #dc3545;
    }

        .visit-card-actions .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }
</style>

<link href="~/css/calender.css" rel="stylesheet" />

<div class="row">
    <div class="col-xl-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Visit Schedule Create</h5>
                <button type="button" class="btn btn-primary btn-sm d-inline-flex align-items-center gap-2" id="scheduleBtn" disabled>
                    <span id="countCheckdata">(0)</span><i class="bi bi-calendar-check"></i>
                    Create Schedule
                </button>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="office">Type</label>
                            @Html.DropDownList("TypeId", ViewBag.type as SelectList, "Select Type", new { @class = "form-control select2", @id = "TypeId", onchange = "onTypeChange(this)" })
                        </div>
                    </div>
                    
                    <div class="col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="office">District</label>
                            @Html.DropDownList("DistrictId", ViewBag.district as SelectList, "Select District", new { @class = "form-control select2", @id = "DistrictId"})
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="office">Division</label>
                            @Html.DropDownList("DivisionId", ViewBag.division as SelectList, "Select Division", new { @class = "form-control select2", @id = "DivisionId" })
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="office">Value Type</label>
                            @Html.DropDownList("ValueTypeId", new SelectList(Enumerable.Empty<SelectListItem>()), new { @class = "form-control select2", @id = "ValueTypeId" })
                        </div>
                    </div>
                </div>
                <div class="row mt-5">
                    <div class="table-responsive">
                        <table id="datatable" class="table table-striped table-hover scheduleTable" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                            <thead style=" background-color:#c9ccd3; font-weight:600;">
                                <tr>
                                    <th width="40"><input type="checkbox" id="selectAll"/> All</th>
                                    <th width="100">Request Date</th>
                                    <th>Source Data</th>                                   
                                    
                                </tr>
                            </thead>
                            <tbody style="font-size:12px;">
                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
        </div>
        <!-- end row -->
    </div>
</div>

<!-- Calendar Section -->
<div class="row">
    <div class="col-md-10">
        <div class="card p-0">
            <div class="calendar-header">
                <button id="prevMonthBtn"><i class="fas fa-chevron-left"></i></button>
                <h3 class="h5 mb-0 text-white" id="currentMonthYear"></h3>
                <button id="nextMonthBtn"><i class="fas fa-chevron-right"></i></button>
            </div>
            <div class="calendar-grid" id="calendarGrid">
                <!-- Day headers will be rendered here -->
                <!-- Calendar cells will be rendered here -->
            </div>
        </div>
    </div>
</div>


<!-- Schedule Modal -->
<div class="modal fade" id="scheduleModal" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-top modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bold">
                    <i class="bi bi-calendar-plus me-2"></i>
                    Create Schedule
                </h5>
                <button type="button" class="btn-close " data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" style="background:#f8f9fa;">
                <div id="errorMessage"></div>
                <div id="selectedLocationsDisplay" class="p-3 bg-light rounded">
                    <!-- Cards will be added here dynamically -->
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>
                    Cancel
                </button>
                <button type="button" class="btn btn-success" id="confirmScheduleBtn">
                    <i class="bi bi-check-circle me-1"></i>
                    Confirm Schedule
                </button>
            </div>
        </div>
    </div>
</div>


<!-- View Visit Details Modal -->
<div class="modal fade" id="viewVisitModal" tabindex="-1" aria-labelledby="viewVisitModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-top">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title text-dark fw-bold" id="viewVisitModalLabel">Visit Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="viewModalBodyContent">
                <!-- Visit details will be dynamically populated here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



@section scripts {
    <!-- Required datatable js -->
    <script src="~/libs/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="~/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"></script>
    <!-- Buttons examples -->
    <script src="~/libs/datatables.net-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/libs/datatables.net-buttons-bs4/js/buttons.bootstrap4.min.js"></script>
    <script src="~/libs/select2/js/select2.min.js"></script>
    <script src="~/libs/bootstrap-datepicker/js/bootstrap-datepicker.min.js"></script>
    <script src="~/libs/spectrum-colorpicker2/spectrum.min.js"></script>
    <script src="~/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"></script>
    <script src="~/libs/admin-resources/bootstrap-filestyle/bootstrap-filestyle.min.js"></script>
    <script src="~/libs/bootstrap-maxlength/bootstrap-maxlength.min.js"></script>
    <script src="~/js/pages/form-advanced.init.js"></script>
    <script src="~/js/app.js"></script>
    <!-- Responsive examples -->
    <script src="~/libs/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"></script>
    <!-- Datatable init js -->
    <script src="~/js/pages/datatables.init.js"></script>

}

<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script>
    let visits=[];
     $(document).ready(function () {

         loaddata();

        filterTable();
    });
    function formatDateToDDMMYYYY(dateString) {
        const date = new Date(dateString);
        if (isNaN(date)) return ''; // Return empty string if invalid date

        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();

        return `${day}-${month}-${year}`;
    }
    function filterTable() {

        var typeId = $('#TypeId').val()===null? 0 :$('#TypeId').val();        
        var districtId = $('#DistrictId').val()===null? 0 :$('#DistrictId').val();
        var divisionId = $('#DivisionId').val()===null? 0 :$('#DivisionId').val();
        var valueTypeId= $('#ValueTypeId').val()===null? 0 :$('#ValueTypeId').val();

        $.ajax({
            url: '/Corporate/Corporate/GetScheduleData',
            type: 'GET',
            data: {
                typeId: typeId,
                districtId: districtId,
                divisionId: divisionId,
                valueTypeId:valueTypeId,
            },
            success: function (data) {
               
            let table = $('#datatable').DataTable();
            table.clear(); // Clear existing rows
            let serial = 1;
            $.each(data, function (index, item) {
                
                table.row.add([
                    `<input type="checkbox" class="rowCheckbox"  
                     data-tokenid="${item.dataId}"
                     data-districtid="${item.districtId}"
                     data-divisionid="${item.divisionId}"
                     data-typeid="${item.typeId}"
                     data-sourceid="${item.sourceId}"
                     data-district="${item.districtName}"
                     data-division="${item.divisionName}"
                     data-source="${item.sourceName}"
                     />`,
                     item.collectionDate.split('T')[0],
                    `<strong>District : </strong> ${item.districtName} →
                      <strong>Division : </strong> ${item.divisionName} →
                      <strong>SourceName : </strong> ${item.sourceName} <span>(${item.typeName})</span> <br>
                      <span class="text-muted">${item.address}</span>`,
                    

                ]);
                serial++;
            });

            table.draw(); // Draw updated rows

            },
            error: function () {
                alert('Error loading data.');
            }
        });
    }


    $('#selectAll').on('change', function () {
        $('.rowCheckbox').prop('checked', this.checked);
         // Update count
        updateCheckedCount();
    });


    // Check #selectAll if all are checked
    $('#datatable').on('change', '.rowCheckbox', function () {
        let total = $('.rowCheckbox').length;
        let checked = $('.rowCheckbox:checked').length;
        $('#selectAll').prop('checked', total === checked);
        updateCheckedCount();
    });
        // Update the count display
    function updateCheckedCount() {
        let count = $('.rowCheckbox:checked').length;
        $('#countCheckdata').text(`(${count})`);
         $('#scheduleBtn').prop('disabled', count === 0);
    }

    function onTypeChange(dropdown) {

        var typeid = dropdown.value;
        $('#ValueTypeId').empty().append('<option>Loading...</option>');      

        $.ajax({
            url: '/Corporate/Corporate/getTypeWiseElementName',
            type: 'GET',
            data: { typeid: typeid },
            dataType: 'json',
            success: function (data) {

                $('#ValueTypeId').empty().append('<option>Select sub-Branch</option>');
                $.each(data, function (i, item) {
                    $('#ValueTypeId').append($('<option>', {
                        value: item.id, // use lowercase if using JsonResult without property casing fix
                        text: item.name
                    }));
                });
                  filterTable();
            },
            error: function (xhr, status, error) {
                console.error('Error fetching branches:', error);
            }
        });
    };

   
    
    //for calender
     let events = [];
     let currentDate = new Date();
      document.getElementById('scheduleBtn').addEventListener('click', openScheduleModal);
      document.getElementById('confirmScheduleBtn').addEventListener('click', SaveConfirmSchedule);

         // Open schedule modal
        function openScheduleModal() {

            let selectedData = [];

            $('.rowCheckbox:checked').each(function () {

                let tokeId  = $(this).data('tokenid');
                let districtId  = $(this).data('districtid');
                let district    = $(this).data('district');
                let division    = $(this).data('division');
                let divisionId  = $(this).data('divisionid');
                let typeId    = $(this).data('typeid');
                let typeName    = $(this).data('typename');
                let sourceId    = $(this).data('sourceid');
                let soName   = $(this).data('source');
                

                selectedData.push({
                    tokeId,
                    district, districtId,
                    division, divisionId,
                    typeId, typeName,
                    sourceId,soName
                    
                });
            });
            if(selectedData.length>0){

                CreateModaldesign(selectedData);
            }

           console.log(selectedData);
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('scheduleModal'));
            modal.show();
        }

        function CreateModaldesign(selectedLocations)
        {
            
             const container = document.getElementById('selectedLocationsDisplay');
            container.innerHTML = ''; // Clear previous content

            selectedLocations.forEach((location, index) => {
                const card = document.createElement('div');
                card.className = 'card card-body mb-3';
                card.innerHTML = `
                    <div class="row g-3">
                        <div class="col-12">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-geo-alt me-1"></i> Selected Location
                            </label>
                            <div class="p-3 bg-light text-primary rounded fw-bold">
                                District : ${location.district} / Division : ${location.division} / Source : ${location.soName || ''}
                            </div>
                         <input type="hidden" id="hidetokenid" value="tokeId_${location.tokeId}_${index}"/>
                         <input type="hidden" id="hidedistrictId" value="districtId_${location.districtId}_${index}"/>
                         <input type="hidden" id="hidedivisionId" value="divisionId_${location.divisionId}_${index}"/>
                         <input type="hidden" id="hidetypeid" value="typeId_${location.typeId}_${index}"/>
                         <input type="hidden" id="hidesourceid" value="sourceId_${location.sourceId}_${index}"/>

                        </div>

                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-calendar me-1"></i> Date
                            </label>
                            <input type="date" class="form-control" name="eventDate_${index}" id="eventDate_${index}" required>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-clock me-1"></i> Time
                            </label>
                            <input type="time" class="form-control" name="eventTime_${index}" required>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-person me-1"></i> Assign User
                            </label>
                            <select class="form-select" name="assignedUser_${index}" id="assignedUser_${index}" required>
                            <option value="">Select User</option>
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-exclamation-triangle me-1"></i> Priority
                            </label>
                            <select class="form-select" name="priority_${index}" required>
                                <option value="">Select Priority</option>
                                <option value="low">Low</option>
                                <option value="medium">Medium</option>
                                <option value="high">High</option>
                                <option value="urgent">Urgent</option>
                            </select>
                        </div>

                        <div class="col-12">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-chat-text me-1"></i> Comments
                            </label>
                            <textarea class="form-control" name="comments_${index}" rows="3"
                                placeholder="Add any additional notes or instructions..."></textarea>
                        </div>
                    </div>
                `;
                container.appendChild(card);

                // Optional: add event listener to date field for dynamic user fetch
                const dateInput = card.querySelector(`#eventDate_${index}`);
                const userSelect = card.querySelector(`#assignedUser_${index}`);

                dateInput.addEventListener('change', () => {
                    const selectedDate = dateInput.value;
                    if (selectedDate) {
                        fetchUsersForDate(selectedDate, userSelect); // function should be defined separately
                    }
                });
            });
        }


    function fetchUsersForDate(date, selectElement)
    {
        selectElement.innerHTML = `<option value="">Loading users...</option>`;

        fetch(`/Corporate/Corporate/GetLoadeduser?dateValue=${encodeURIComponent(date)}`)
            .then(res => res.json())
            .then(users => {
                selectElement.innerHTML = `<option value="">Select User</option>`;

                users.forEach(user => {
                    const opt = document.createElement('option');
                    opt.value = user.userId;
                    opt.textContent = user.userName;
                    selectElement.appendChild(opt);
                });
            })
            .catch(() => {
                selectElement.innerHTML = `<option value="">Error loading users</option>`;
            });
    }


    function SaveConfirmSchedule()
    {
        const cards = document.querySelectorAll('#selectedLocationsDisplay .card');
        const errorContainer = document.getElementById('errorMessage');
        const scheduleData = [];
        errorContainer.innerHTML = ''; // Clear previous error
        let hasError = false;
        cards.forEach((card, index) => {
            const locationText = card.querySelector('.bg-light.text-primary').textContent.trim();
             const token = card.querySelector(`#hidetokenid`).value;
            const tokenId = token.split('_')[1];  // Gets the actual corpId from "corpid_123_index"

            const type = card.querySelector(`#hidetypeid`).value;
            const typeId = type.split('_')[1];

            const districtValue = card.querySelector(`#hidedistrictId`).value;
            const districtId = districtValue.split('_')[1];

            const divisionValue = card.querySelector(`#hidedivisionId`).value;
            const divisionId = divisionValue.split('_')[1];

            const source = card.querySelector(`#hidesourceid`).value;
            const sourceId = source.split('_')[1];

            const date = card.querySelector(`[name="eventDate_${index}"]`).value;
            const time = card.querySelector(`[name="eventTime_${index}"]`).value;
            const assignedUser = card.querySelector(`[name="assignedUser_${index}"]`).value;
            const priority = card.querySelector(`[name="priority_${index}"]`).value;
            const comments = card.querySelector(`[name="comments_${index}"]`).value;

            if (!date || time==='' || !assignedUser || priority==='')
            {
                 errorContainer.innerHTML = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong>Entry ${index + 1}:</strong> Please complete all required fields.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                hasError = true;
                return; // Stop this iteration
            }

            scheduleData.push({
                locationText,
                tokenId,
                typeId,
                districtId,
                divisionId,
                sourceId,
                date,
                time,
                assignedUser,
                priority,
                comments
            });
        });

        // Optional: confirm before sending
        if (scheduleData.length > 0) {
            fetch('/Corporate/Corporate/SaveScheduleList', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(scheduleData)
            })
            .then(response => {
               
                if (response.ok) {
                    alert("Schedule Create Successfully");
                    // Optionally close modal and reset
                    document.getElementById('scheduleModal').classList.remove('show');
                    document.body.classList.remove('modal-open');
                    document.querySelector('.modal-backdrop')?.remove();
                    window.location.reload();
                } else {
                    alert('Failed to save schedule.');
                }
            })
            .catch(err => {
                console.error(err);
                alert('Error occurred while saving schedule.');
            });
        }
    }

    function loaddata(){
         $.ajax({
            url: '/Corporate/Corporate/GetCalaenderData',
            type: 'GET',
            dataType: 'json',
            success: function (data) {

                visits=data;
                generateCalendar(currentMonth, currentYear);
            },
            error: function () {
                alert('Error loading data.');
            }
        });
    }    

            const calendarGrid = document.getElementById('calendarGrid');
            const currentMonthYearDisplay = document.getElementById('currentMonthYear');
            const prevMonthBtn = document.getElementById('prevMonthBtn');
            const nextMonthBtn = document.getElementById('nextMonthBtn');


            // View Details Modal elements
            const viewVisitModal =document.getElementById('viewVisitModal');

            const viewModalBodyContent = document.getElementById('viewModalBodyContent');
            const viewVisitModalLabel = document.getElementById('viewVisitModalLabel');

            let today=new Date();
            let currentMonth = new Date().getMonth();
            let currentYear = new Date().getFullYear();
            let selectedDate = today; // Initially select today
          

            // Function to format time for display (e.g., "14:30" to "02:30 PM")
            function formatTimeForDisplay(timeStr) {
                if (!timeStr) return '';
                // Handle cases where time might already be in AM/PM format (e.g., from initial data)
                if (timeStr.includes('AM') || timeStr.includes('PM')) {
                    return timeStr;
                }
                const [hours, minutes] = timeStr.split(':').map(Number);
                const ampm = hours >= 12 ? 'PM' : 'AM';
                const displayHours = hours % 12 === 0 ? 12 : hours % 12;
                return `${String(displayHours).padStart(2, '0')}:${String(minutes).padStart(2, '0')} ${ampm}`;
            }

            // Function to format date for display (e.g., "YYYY-MM-DD" to "Month Day, Year")
            function formatDateForDisplay(dateStr) {
                if (!dateStr) return '';
                const dateObj = new Date(dateStr + 'T00:00:00'); // Add T00:00:00 to avoid timezone issues
                return dateObj.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
            }

            // Function to generate calendar
            function generateCalendar(month, year) {
                calendarGrid.innerHTML = ''; // Clear existing calendar
                const today = new Date();
                const firstDayOfMonth = new Date(year, month, 1);
                const lastDayOfMonth = new Date(year, month + 1, 0);
                const daysInMonth = lastDayOfMonth.getDate();
                const firstDayOfWeek = firstDayOfMonth.getDay(); // 0 for Sunday, 1 for Monday
               
                currentMonthYearDisplay.textContent = new Date(year, month).toLocaleString('en-US', { month: 'long', year: 'numeric' });

                // Day headers
                const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                dayNames.forEach(day => {
                    const dayHeader = document.createElement('div');
                    dayHeader.classList.add('calendar-day-header');
                    dayHeader.textContent = day;
                    calendarGrid.appendChild(dayHeader);
                });

                // Fill leading empty cells
                for (let i = 0; i < firstDayOfWeek; i++) {
                    const cell = document.createElement('div');
                    cell.classList.add('calendar-cell', 'inactive');
                    // Optionally show a few days from previous month
                    const prevMonthLastDay = new Date(year, month, 0).getDate();
                    cell.textContent = prevMonthLastDay - firstDayOfWeek + 1 + i;
                    calendarGrid.appendChild(cell);
                }

                // Fill days of the month
                for (let day = 1; day <= daysInMonth; day++) {
                    const cell = document.createElement('div');
                    cell.classList.add('calendar-cell');
                    cell.textContent = day;
                    const cellDateFormatted = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                   
                    cell.dataset.date = cellDateFormatted;

                    // Add current day highlight
                    if (day === today.getDate() && month === today.getMonth() && year === today.getFullYear()) {
                        cell.classList.add('current-day');
                    }
                    // Add selected day highlight
                    if (cellDateFormatted === selectedDate.toISOString().substring(0, 10)) {
                        cell.classList.add('selected-day');
                    }

                    // Add event indicators
                    const hasEvent = visits.some(visit =>{
                        const visitDate = visit.dateOfVisit.split('T')[0];
                        
                        return visitDate === cellDateFormatted;
                    }
                    );
                    if (hasEvent) {
                       
                        const eventDot = document.createElement('div');
                        eventDot.classList.add('event-dot');
                        cell.appendChild(eventDot);
                        cell.classList.add('has-event');
                    }

                    // Calendar cell click event to open View Details Modal
                    cell.addEventListener('click', () => {
                        // Remove previous selection
                        document.querySelectorAll('.calendar-cell.selected-day').forEach(s => s.classList.remove('selected-day'));
                        // Add new selection
                        cell.classList.add('selected-day');
                        selectedDate = new Date(year, month, day); // Update selected date

                        viewVisitsForDay(selectedDate); // Open view modal for this day
                    });
                    calendarGrid.appendChild(cell);
                }

                // Fill trailing empty cells (to complete the last row)
                const totalCells = firstDayOfWeek + daysInMonth;
                const remainingCells = 42 - totalCells; // Max 6 rows * 7 days = 42 cells
                for (let i = 1; i <= remainingCells; i++) {
                    const cell = document.createElement('div');
                    cell.classList.add('calendar-cell', 'inactive');
                    cell.textContent = i; // Days from next month
                    calendarGrid.appendChild(cell);
                }
            }



            // Function to delete a visit
            function deleteVisit(id) {
                if (confirm('Are you sure you want to delete this visit?')) {
                    visits = visits.filter(visit => visit.scheduleId !== id);
                    generateCalendar(currentMonth, currentYear); // Re-render calendar to remove event dot if no more visits

                }
            }

            // Function to view visit details in a dedicated modal for a specific day
            function viewVisitsForDay(date) {

                const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
                const visitsForDay = visits.filter(visit =>{
                     const visitDate = visit.dateOfVisit.split('T')[0];
                    return visitDate === formattedDate;
                }
                );

                viewModalBodyContent.innerHTML = ''; // Clear previous content
                viewVisitModalLabel.textContent = `Visits for ${formatDateForDisplay(formattedDate)}`;

                if (visitsForDay.length === 0) {
                    viewModalBodyContent.innerHTML = `<p class="text-muted text-center py-3">No visits scheduled for this day.</p>`;
                } else {

                    
                    visitsForDay.sort((a, b) => {                       
                        const timeA = new Date(`2000/01/01 ${a.timeOfVisit}`);
                        const timeB = new Date(`2000/01/01 ${b.timeOfVisit}`);
                        return timeA - timeB;
                    });
                    visitsForDay.forEach(visit => {
                        const statusClass = visit.priority === 'high' ? 'bg-success' :
                                            visit.priority === 'medium' ? 'bg-primary' :
                                            visit.priority === 'urgent' ? 'bg-warning text-dark' :
                                            visit.priority === 'low' ? 'bg-secondary' :
                                            'bg-danger'; // For cancelled
                           const visitDate = visit.dateOfVisit.split('T')[0];

                        const visitHtml = `
                            <div class="card mb-3 shadow-sm border" style="background:#edf8fb;">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0 fw-bold text-dark">${visit.userName}</h6>
                                        <span class="badge ${statusClass}">${visit.priority}</span>
                                    </div>
                                    <p class="mb-1 text-muted small"><i class="fas fa-clock me-1"></i> ${formatTimeForDisplay(visit.timeOfVisit)}</p>
                                    <p class="mb-1 text-muted small"><i class="fas fa-calendar me-1"></i> ${visitDate}</p>
                                    <p class="mb-2 text-muted small"><i class="fa fa-bell me-1"></i> ${visit.locationText}</p>
                                    <p class="mb-2 text-muted small"><i class="fa fa-map-marker me-1"></i> ${visit.address}</p>
                                    <p class="mb-2 text-muted small"><i class="fa fa-comment me-1"></i> ${visit.commentValue}</p>
                                    <div class="text-end">
                                        <button class="btn btn-sm btn-danger" data-id="${visit.scheduleId}" data-action="delete-from-view">
                                            <i class="fas fa-trash-alt"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `;
                        viewModalBodyContent.insertAdjacentHTML('beforeend', visitHtml);
                    });

                    // Attach event listeners to buttons within the newly rendered modal content
                    viewModalBodyContent.querySelectorAll('button[data-action="edit-from-view"]').forEach(button => {
                        button.addEventListener('click', (event) => {
                            const id = parseInt(event.target.dataset.scheduleId);
                           
                            const visitToEdit = visits.find(v => v.scheduleId === id);
                            if (visitToEdit) {
                                viewVisitModal.hide(); // Hide current modal
                                openAddEditModal(visitToEdit); // Open edit modal
                            }
                        });
                    });

                    viewModalBodyContent.querySelectorAll('button[data-action="delete-from-view"]').forEach(button => {
                        button.addEventListener('click', (event) => {
                            const id = parseInt(event.target.dataset.scheduleId);
                            deleteVisit(id);
                            viewVisitModal.hide(); // Hide current modal after delete
                            // Re-open if other visits exist for the day, or just close if none
                            const remainingVisits = visits.filter(v =>
                                {
                                    const dvd=formatDateForDisplay(v.dateOfVisit);
                                    return   dvd === formattedDate;
                                }
                                );
                                
                            if (remainingVisits.length > 0) {
                                // Use a timeout to ensure modal is hidden before attempting to show again
                                setTimeout(() => viewVisitsForDay(dateOfVisit), 300);
                            }
                        });
                    });
                }
                 $('#viewVisitModal').modal('show');

            }


            // Event Listeners for Month Navigation
            prevMonthBtn.addEventListener('click', () => {
                currentMonth--;
                if (currentMonth < 0) {
                    currentMonth = 11;
                    currentYear--;
                }
                generateCalendar(currentMonth, currentYear);

            });

            nextMonthBtn.addEventListener('click', () => {
                currentMonth++;
                if (currentMonth > 11) {
                    currentMonth = 0;
                    currentYear++;
                }
                generateCalendar(currentMonth, currentYear);

            });

            // "Add New Visit" button functionality (desktop & mobile)
            $('#addVisitBtnDesktop').on('click', () => openAddEditModal(null));
            $('#addVisitBtnMobile').on('click', () => openAddEditModal(null));

            // Initial render




</script>
