@{
    ViewBag.pTitle = "OrganizationConfigure";
    ViewBag.pageTitle = "InfoTrack";
    ViewBag.Title = "OrganizationConfigure";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
}
@section styles {
    <!-- jquery.vectormap css -->
    <link href="~/libs/admin-resources/jquery.vectormap/jquery-jvectormap-1.2.2.css" rel="stylesheet" type="text/css" />

    <!-- DataTables -->
    <link href="~/libs/datatables.net-bs4/css/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <link href="~/libs/datatables.net-buttons-bs4/css/buttons.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <link href="~/libs/datatables.net-select-bs4/css//select.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <!-- Responsive datatable examples -->
    <link href="~/libs/datatables.net-responsive-bs4/css/responsive.bootstrap4.min.css" rel="stylesheet" type="text/css" />

}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<style>
    #main-content-wrapper {
        display: flex; /* Use flexbox for main layout */
        gap: 20px; /* Space between tree and list panels */
        max-width: 98%; /* Max width for the entire content */
        width: fit-content;
        margin: auto; /* Center the main wrapper */
        align-items: flex-start; /* Align items to the top */
    }

    #tree-container-wrapper {
        background-color: #ffffff;
        border-radius: 1rem; /* Rounded corners for the wrapper */
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1); /* Soft shadow */
        padding: 20px;
        overflow: auto; /* Enable scrolling if tree exceeds wrapper size */
        min-width: 300px;
        flex-shrink: 0; /* Prevent tree from shrinking */
    }

    /* --- Tree View Specific Styles --- */
    .tree-view {
        list-style: none;
        padding-left: 0;
        margin-left: 0;
    }

        .tree-view ul {
            list-style: none;
            padding-left: 25px; /* Indentation for child levels */
            margin-left: 0;
            position: relative;
        }

            .tree-view ul li {
                position: relative;
                padding-left: 20px; /* Space for the dotted line and icon */
                line-height: 1.8;
            }

                /* Dotted lines for the tree structure */
                .tree-view ul li::before {
                    content: '';
                    position: absolute;
                    left: 10px; /* Position of the vertical line */
                    top: 0;
                    bottom: 0;
                    width: 1px;
                    border-left: 1px dotted #a30909;
                }

                .tree-view ul li:last-child::before {
                    height: 18px; /* Adjust height for last child to not go below */
                }

                .tree-view ul li::after {
                    content: '';
                    position: absolute;
                    left: 10px; /* Start of horizontal line */
                    top: 18px; /* Vertical position of horizontal line */
                    width: 10px; /* Length of horizontal line */
                    height: 1px;
                    border-top: 1px dotted #ccc;
                }

    .node-content {
        display: inline-flex;
        align-items: center;
        cursor: pointer;
        padding: 5px 10px;
        border-radius: 0.5rem;
        transition: background-color 0.2s ease;
    }

        .node-content:hover {
            background-color: #e9ecef;
        }

        .node-content.selected {
            background-color: #f1e3e5;
            font-weight: 600;
            border: 1px solid #ebcbc2;
        }

    .node-icon {
        margin-right: 8px;
        color: #890707; /* Blue for icons */
        width: 18px; /* Fixed width for consistent alignment */
        text-align: center;
    }

    .toggle-icon {
        margin-right: 5px;
        cursor: pointer;
        color: #890707; /* Grey for toggle icons */
        transition: transform 0.2s ease;
    }

        .toggle-icon.collapsed {
            transform: rotate(-90deg); /* Rotate for collapsed state */
        }
    /* --- End Tree View Specific Styles --- */


    .crud-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 20px;
    }

    /* Right-side panel styling */
    #node-list-panel {
        /*   background-color: #ffffff;
                    border-radius: 1rem;
                    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
                    padding: 20px; */
        flex-grow: 1;
        min-width: 400px;
        display: none; /* Hidden by default */
        flex-direction: column;
    }



        #node-list-panel .table-responsive {
            max-height: 500px;
            overflow-y: auto;
            margin-bottom: 15px;
        }

        #node-list-panel .table-hover tbody tr:hover {
            background-color: #f1f1f1;
            cursor: pointer;
        }

        #node-list-panel .table-active {
            background-color: #e2e6ea !important; /* Highlight selected row */
        }

    .table-hover > tbody > tr:hover > * {
        --bs-table-color-state: var(--bs-table-hover-color);
        --bs-table-bg-state: rgb(199 94 94 / 8%);
    }

    .table-striped > tbody > tr:nth-of-type(odd) > * {
        --bs-table-color-type: var(--bs-table-striped-color);
        --bs-table-bg-type: rgb(245 240 240 / 5%);
    }

    .bgsuccess {
        --bs-bg-opacity: 1;
        background-color: rgb(104 48 48) !important;
    }
</style>


<div class="row">
    <div class="col-md-6">
        <div class="card shadow-lg">
            <div class="card-header p-2">
                <h5 class="text-center" style="color:darkred;">City Bank PLC Organizational Tree</h5>
            </div>
            <div class="card-body">
                <div id="tree-container">
                    <!-- Tree will be rendered here as a nested UL/LI structure -->
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card shadow-lg">
            <div id="node-list-panel">
                <div class="card-header p-2">
                    <h5 class="text-center" style="color:darkred;">All <span id="currentListTypeTitle"></span> List</h5>
                </div>
                <div class="card-body">

                    <div class="crud-buttons mb-3">
                        <button type="button" class="btn btn-success btn-sm shadow-sm" id="addNodeInListBtn">Add <span class="list-btn-type"></span></button>
                        <button type="button" class="btn btn-warning btn-sm shadow-sm" id="editNodeInListBtn">Edit <span class="list-btn-type"></span></button>
                        <button type="button" class="btn btn-danger btn-sm shadow-sm" id="deleteNodeInListBtn">Delete <span class="list-btn-type"></span></button>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>Created Date</th>
                                    <th>Active</th>
                                    <th>Contact</th>
                                </tr>
                            </thead>
                            <tbody id="node-list-tbody">
                                <!-- Node list rows will be populated here -->
                            </tbody>
                        </table>
                    </div>
                    <p class="text-muted text-center" id="no-nodes-message" style="display: none;">No items found.</p>
                </div>
            </div>

        </div>
    </div>
</div>
<!-- Add/Edit Node Modal (for CRUD operations) -->
<div class="modal fade" id="crudNodeModal" tabindex="-1" aria-labelledby="crudNodeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-3 shadow-lg">
            <div class="modal-header bgsuccess text-white rounded-top-3 p-2">
                <h5 class="modal-title text-white" id="crudNodeModalLabel">Add/Edit Node</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <form id="nodeForm">
                    <input type="hidden" id="form-node-id">
                    <input type="hidden" id="form-parent-id"> <!-- To store parent ID when adding -->
                    <div class="mb-3">
                        <label for="form-name" class="form-label">Name</label>
                        @* <input type="text" class="form-control" id="form-name" required> *@
                        <select class="form-select" name="form-name" id="form-name" required>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="form-type" class="form-label">Type</label>
                        <select class="form-select" id="form-type" required>
                            <option value="0">Select Type</option>
                            <option value="Organization">Organization</option>
                            <option value="Branch">Branch</option>
                            <option value="SubBranch">Sub-Branch</option>
                            <option value="District">District</option>
                            <option value="Division">Division</option>
                            @*  <option value="Zone">Zone</option>
                            <option value="Area">Area</option> *@
                            <option value="Booth">Booth</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="form-createdDate" class="form-label">Created Date</label>
                        <input type="date" class="form-control" id="form-createdDate" required>
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="form-isActive">
                        <label class="form-check-label" for="form-isActive">Is Active</label>
                    </div>
                    <div class="mb-3">
                        <label for="form-address" class="form-label">Address</label>
                        <input type="text" class="form-control" id="form-address">
                    </div>
                    <div class="mb-3">
                        <label for="form-contactNumber" class="form-label">Contact Number</label>
                        <input type="text" class="form-control" id="form-contactNumber">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success btn-sm" id="saveNodeBtn">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Custom Message/Confirmation Modal -->
<div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-3 shadow-lg">
            <div class="modal-header bg-info text-white rounded-top-3">
                <h5 class="modal-title" id="messageModalLabel">Information</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <p id="messageModalBody"></p>
            </div>
            <div class="modal-footer" id="messageModalFooter">
                <button type="button" class="btn btn-secondary rounded-pill" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>


@section scripts {
    <!-- apexcharts -->
    <!-- jquery.vectormap map -->
    <script src="~/libs/admin-resources/jquery.vectormap/jquery-jvectormap-1.2.2.min.js"></script>
    <script src="~/libs/admin-resources/jquery.vectormap/maps/jquery-jvectormap-us-merc-en.js"></script>
    <!-- Required datatable js -->
    <script src="~/libs/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="~/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"></script>
    <!-- Buttons examples -->
    <script src="~/libs/datatables.net-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/libs/datatables.net-buttons-bs4/js/buttons.bootstrap4.min.js"></script>
    <script src="~/libs/jszip/jszip.min.js"></script>
    <script src="~/libs/pdfmake/build/pdfmake.min.js"></script>
    <script src="~/libs/pdfmake/build/vfs_fonts.js"></script>
    <script src="~/libs/datatables.net-buttons/js/buttons.html5.min.js"></script>
    <script src="~/libs/datatables.net-buttons/js/buttons.print.min.js"></script>
    <script src="~/libs/datatables.net-buttons/js/buttons.colVis.min.js"></script>
    <script src="~/libs/datatables.net-keytable/js/dataTables.keyTable.min.js"></script>
    <script src="~/libs/datatables.net-select/js/dataTables.select.min.js"></script>
    <!-- Responsive examples -->
    <script src="~/libs/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"></script>
    <!-- Datatable init js -->
    <script src="~/js/pages/datatables.init.js"></script>
    <script src="~/js/app.js"></script>


}

<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script>
      window.addEventListener('load', renderTree);


      let treeData=[];
    $.ajax({
        url: '/Configure/Configure/GetOrganizationTree',
        type: 'GET',
        contentType: 'application/json',
        success: function (res) {
          if (res && res.success && res.data) {
            treeData = res.data[0];
            
            renderTree(treeData);
          }
          else {
                    console.warn("No data received from server.");
                }
            },
            error: function (err) {
                console.error('Error while fetching organization tree:', err);
                alert('Error while fetching organization tree.');
            }
    });




    // let treeData = {
    //        id: 'org-1',
    //        name: 'City Bank PLC',
    //        type: 'Organization',
    //        createdDate: '1995-01-01',
    //        isActive: true,
    //        address: 'Head Office, Dhaka',
    //        contactNumber: '+880-1111111111',
    //        children: [
    //            {
    //                id: 'branch-main',
    //                name: 'Branch',
    //                type: 'Branch',
    //                createdDate: '2000-01-10',
    //                isActive: true,
    //                address: '123 Main St, Dhaka',
    //                contactNumber: '+880-1700112233',
    //                children: [
    //                    {
    //                        id: 'subbranch-dhan',
    //                        name: 'Sub-Branch',
    //                        type: 'SubBranch',
    //                        createdDate: '2015-05-01',
    //                        isActive: true,
    //                        address: 'Dhanmondi R/A, Dhaka',
    //                        contactNumber: '+880-1800112233',
    //                        children: [
    //                            {
    //                                id: 'dist-dhaka',
    //                                name: 'District',
    //                                type: 'District',
    //                                createdDate: '2008-07-20',
    //                                isActive: true,
    //                                address: 'Dhaka District Office',
    //                                contactNumber: '+880-1122334455',
    //                                children: [
    //                                    {
    //                                        id: 'div-retail',
    //                                        name: 'Division',
    //                                        type: 'Division',
    //                                        createdDate: '2005-03-15',
    //                                        isActive: true,
    //                                        address: 'Retail Div Office',
    //                                        contactNumber: '+880-9876543210',
    //                                        children: [
    //                                                 {
    //                                                        id: 'booth-gulshan',
    //                                                        name: 'Booth',
    //                                                        type: 'Booth',
    //                                                        createdDate: '2018-03-01',
    //                                                        isActive: true,
    //                                                        address: 'Gulshan Shopping Center',
    //                                                        contactNumber: '+880-1900112233',
    //                                                        children: []
    //                                                 }
    //                                                   ]
    //                                    }
    //                                ]
    //                            }
    //                        ]
    //                    }
    //                ]
    //            },
    //            {
    //                id: 'branch-chittagong', // Another top-level branch directly under Organization
    //                name: 'Chittagong Branch',
    //                type: 'Branch',
    //                createdDate: '2002-02-20',
    //                isActive: false,
    //                address: 'Port Road, Chittagong',
    //                contactNumber: '+880-1600223344',
    //                children: []
    //            },
    //            {
    //                id: 'branch-sylhet',
    //                name: 'Sylhet Branch',
    //                type: 'Branch',
    //                createdDate: '2003-07-05',
    //                isActive: true,
    //                address: 'Sylhet City Center',
    //                contactNumber: '+880-1555667788',
    //                children: []
    //            },
    //            {
    //                id: 'branch-mirpur', // Moved to be a sibling branch under Organization
    //                name: 'Mirpur Branch',
    //                type: 'Branch',
    //                createdDate: '2012-04-20',
    //                isActive: true,
    //                address: 'Mirpur 10, Dhaka',
    //                contactNumber: '+880-1600223344',
    //                children: []
    //            },
    //            {
    //                id: 'branch-mohakhali',
    //                name: 'Mohakhali Branch',
    //                type: 'Branch',
    //                createdDate: '2025-07-27',
    //                isActive: true,
    //                address: 'Mohakhali C/A, Dhaka',
    //                contactNumber: '01254854596',
    //                children: []
    //            }
    //        ]
    //    };
        // Map node types to Font Awesome icons
        const nodeIcons = {
            'Organization': 'fa-solid fa-building',
            'Branch': 'fa-solid fa-code-branch', 
            'SubBranch': 'fa-solid fa-sitemap',
            'District': 'fa-solid fa-city',
            'Division': 'fa-solid fa-layer-group',
            // 'Zone': 'fa-solid fa-map-marker-alt',
            // 'Area': 'fa-solid fa-location-dot',
            'Booth': 'fa-solid fa-file' 
        };

        
        const childTypeMapping = {
            'Organization': 'Branch',
            'Branch': 'SubBranch',
            'SubBranch': 'District',
            'District': 'Division',
            'Division': 'Booth',
            'Booth': 'N/A' 
        };
        const treeContainer = document.getElementById('tree-container');
        const nodeListPanel = document.getElementById('node-list-panel');
        const nodeListTbody = document.getElementById('node-list-tbody');
        const listBtnTypeSpans = document.querySelectorAll('.list-btn-type');
        const noNodesMessage = document.getElementById('no-nodes-message');
        const addNodeInListBtn = document.getElementById('addNodeInListBtn');
        const editNodeInListBtn = document.getElementById('editNodeInListBtn');
        const deleteNodeInListBtn = document.getElementById('deleteNodeInListBtn')
        const saveNodeBtn = document.getElementById('saveNodeBtn');
        const formNodeId = document.getElementById('form-node-id');
        const formParentId = document.getElementById('form-parent-id');
        const formName = document.getElementById('form-name');
        const formType = document.getElementById('form-type');
        const formCreatedDate = document.getElementById('form-createdDate');
        const formIsActive = document.getElementById('form-isActive');
        const formAddress = document.getElementById('form-address');
        const formContactNumber = document.getElementById('form-contactNumber');
        const crudNodeModalLabel = document.getElementById('crudNodeModalLabel');
        const messageModalBody = document.getElementById('messageModalBody');
        const messageModalFooter = document.getElementById('messageModalFooter');
        const crudNodeModal = document.getElementById('crudNodeModal');

        let selectedNodeId = null;
        let selectedNodeInListId = null;
        let currentListType = null; 
        let currentListParentNodeId = null; 

        function renderTree() {
            console.log("Rendering tree...");
            treeContainer.innerHTML = ''; // Clear previous tree content

            if (!treeData) {
                console.log("Tree data is empty. Cannot render.");
                return;
            }
            const rootUl = document.createElement('ul');
            rootUl.classList.add('tree-view');
            treeContainer.appendChild(rootUl);

            buildTreeHtml(treeData, rootUl);
        }

        function buildTreeHtml(node, parentUl) {
           
            const listItem = document.createElement('li');

            const nodeContentSpan = document.createElement('span');
            nodeContentSpan.classList.add('node-content');
            nodeContentSpan.setAttribute('data-node-id', node.id);

            const toggleIcon = document.createElement('i');
            toggleIcon.classList.add('toggle-icon', 'fas');

            const nodeIcon = document.createElement('i');
            nodeIcon.classList.add('node-icon');


            if (node.children && node.children.length > 0) {
                // Node has children, so it's a folder
                toggleIcon.classList.add('fa-minus-square'); // Default to expanded (minus)
                nodeIcon.classList.add('fa-solid', 'fa-folder-open'); // Folder open for expandable nodes

                // Add click listener for toggling children visibility
                toggleIcon.addEventListener('click', (event) => {
                    event.stopPropagation(); // Prevent node selection when toggling
                    const childUl = listItem.querySelector('ul');
                    if (childUl) {
                        const isCollapsed = childUl.style.display === 'none';
                        childUl.style.display = isCollapsed ? '' : 'none'; // Toggle display
                        toggleIcon.classList.toggle('fa-plus-square', !isCollapsed);
                        toggleIcon.classList.toggle('fa-minus-square', isCollapsed);
                        nodeIcon.classList.toggle('fa-folder', !isCollapsed); // Switch to closed folder
                        nodeIcon.classList.toggle('fa-folder-open', isCollapsed); // Switch to open folder
                    }
                });
            } else {

                toggleIcon.classList.add('fa-square');
                toggleIcon.style.visibility = 'hidden';
                const iconClass = nodeIcons[node.type] || 'fa-solid fa-circle';
                nodeIcon.classList.add(...iconClass.split(' '));
            }

            nodeContentSpan.appendChild(toggleIcon);
            nodeContentSpan.appendChild(nodeIcon);

            const nodeNameText = document.createTextNode(node.levelName);
            nodeContentSpan.appendChild(nodeNameText);

            listItem.appendChild(nodeContentSpan);


            nodeContentSpan.addEventListener('click', (event) => {
                console.log(`Node ${node.id} clicked.`);

                document.querySelectorAll('.node-content.selected').forEach(n => n.classList.remove('selected'));

                nodeContentSpan.classList.add('selected');
                selectedNodeId = node.id;

                //displayNodeDetails(node);

                let nodesToDisplayInList = [];
                let typeForList = '';
                let parentIdForListAdd = null;
              

                if (node.id === 1) {
                    nodesToDisplayInList = findAllNodesByType(treeData, 'Branch');
                    typeForList = 'Branch';
                    parentIdForListAdd = node.id;
                } else if (node.children && node.children.length > 0) {

                    nodesToDisplayInList = node.children;
                    typeForList = childTypeMapping[node.type];
                    parentIdForListAdd = node.id;
                } else {

                    nodeListPanel.style.display = 'none';
                    currentListParentNodeId = null;
                    return;
                }

                renderNodeListPanel(nodesToDisplayInList, typeForList);
                nodeListPanel.style.display = 'flex';
                currentListParentNodeId = parentIdForListAdd;

                event.stopPropagation();
            });


            parentUl.appendChild(listItem);

            if (node.children && node.children.length > 0) {
                const childUl = document.createElement('ul');

                listItem.appendChild(childUl);
                node.children.forEach(child => buildTreeHtml(child, childUl));
            }
        }

         function findNodeById(nodeId, currentTree = treeData) {
            if (!currentTree) return null;

            if (currentTree.id === nodeId) {
                return currentTree;
            }
            if (currentTree.children) {
                for (const child of currentTree.children) {
                    const found = findNodeById(nodeId, child);
                    if (found) {
                        return found;
                    }
                }
            }
            return null;
        }



         function renderNodeListPanel(nodes, type) {

            nodeListTbody.innerHTML = ''; 
            selectedNodeInListId = null; 
            currentListType = type;             
            
            currentListTypeTitle.textContent = type + 's'; 
            listBtnTypeSpans.forEach(span => span.textContent = type);

            if (nodes.length === 0) {
                noNodesMessage.style.display = 'block';
                return;
            } else {
                noNodesMessage.style.display = 'none';
            }

            nodes.forEach(node => {
                const row = document.createElement('tr');
                row.setAttribute('data-node-id', node.id);
                row.innerHTML = `
                    <td>${node.levelName}</td>
                    <td>${node.type}</td>
                    <td>${node.status}</td>
                    <td>${node.isActive ? 'Yes' : 'No'}</td>
                    <td>${node.contactNumber || 'N/A'}</td>
                `;
                row.addEventListener('click', () => {
                    // Remove active class from previous row
                    nodeListTbody.querySelectorAll('.table-active').forEach(r => r.classList.remove('table-active'));
                    // Add active class to clicked row
                    row.classList.add('table-active');
                    selectedNodeInListId = node.id;
                    console.log(`Node selected in list: ${node.levelName} (ID: ${node.id})`);
                });
                nodeListTbody.appendChild(row);
            });
        }

         function findAllNodesByType(node, type, foundNodes = []) {
            if (!node) return foundNodes;

            if (node.type === type) {
                foundNodes.push(node);
            }
            if (node.children) {
                node.children.forEach(child => findAllNodesByType(child, type, foundNodes));
            }
            return foundNodes;
        }

        addNodeInListBtn.addEventListener('click', () => {

            DynamicdataName(currentListParentNodeId); // for data name
            
        });


        function DynamicdataName(data_id)
        {
            
            $.ajax({
                url: '/Configure/Configure/GetDynamicOrganizationName',
                type: 'GET',
                contentType: 'application/json',
                data:{id:data_id},
                success: function (res) {
                   
                     if(res.length>0)
                     {
                        
                         AddButtonWork(res);
                     }
                },
                error: function (err) {
                    
                    alert('Error while fetching Dynamic Organization Name.');
                }
             });
        }


        function AddButtonWork(data)
        {
            console.log(`Add ${currentListType} (List) button clicked.`);
            if (!currentListType || !currentListParentNodeId) {
                showMessage("Please select a parent node in the tree first to add a new item to its list.");
                return;
            }
            
             const dropdown = $('#form-name');
                dropdown.empty();
                dropdown.append('<option value="0">Select Name</option>');
                
                if (data && data.length > 0) {
                    data.forEach(item => {
                        dropdown.append(`<option value="${item.value}">${item.text}</option>`);
                    });
                }
                dropdown.val('0');
            crudNodeModalLabel.textContent = `Add New ${currentListType}`;
            formNodeId.value = '';
            formParentId.value = currentListParentNodeId;
            formName.value = '';
            formType.value = currentListType;
            formCreatedDate.value = new Date().toISOString().split('T')[0];
            formIsActive.checked = true;
            formAddress.value = '';
            formContactNumber.value = '';
             $('#crudNodeModal').modal('show');
        }

       editNodeInListBtn.addEventListener('click', () => {
            console.log(`Edit ${currentListType} (List) button clicked.`);
            if (!selectedNodeInListId) {
                showMessage(`Please select a ${currentListType} from the list to edit.`);
                return;
            }

            const nodeToEdit = findNodeById(selectedNodeInListId);
            if (nodeToEdit && nodeToEdit.type === currentListType) { // Ensure it's the correct type
                crudNodeModalLabel.textContent = `Edit ${currentListType}`;
                formNodeId.value = nodeToEdit.id;
                formParentId.value = ''; // Not relevant for editing
                formName.value = nodeToEdit.name;
                formType.value = nodeToEdit.type;
                formCreatedDate.value = nodeToEdit.createdDate;
                formIsActive.checked = nodeToEdit.isActive;
                formAddress.value = nodeToEdit.address || '';
                formContactNumber.value = nodeToEdit.contactNumber || '';
                $('#crudNodeModal').modal('show');
            } else {
                showMessage(`Selected item is not a ${currentListType} or not found for editing.`);
                console.error(`Selected node in list not found for editing. ID:`, selectedNodeInListId);
            }
        });

         function findNodeAndParentById(nodeId, currentTree = treeData, parent = null) {
            if (!currentTree) return null;

            if (currentTree.id === nodeId) {
                return { node: currentTree, parent: parent };
            }
            if (currentTree.children) {
                for (const child of currentTree.children) {
                    const found = findNodeAndParentById(nodeId, child, currentTree);
                    if (found) {
                        return found;
                    }
                }
            }
            return null;
        }




        deleteNodeInListBtn.addEventListener('click', async () => {
            console.log(`Delete ${currentListType} (List) button clicked.`);
            if (!selectedNodeInListId) {
                showMessage(`Please select a ${currentListType} from the list to delete.`);
                return;
            }

            const nodeInfo = findNodeAndParentById(selectedNodeInListId);
            if (nodeInfo && nodeInfo.node && nodeInfo.node.type === currentListType) { // Ensure it's the correct type
                const confirmDelete = await showMessage(`Are you sure you want to delete ${currentListType} "${nodeInfo.node.lavelName}" (ID: ${nodeInfo.node.id}) and all its children? This action cannot be undone.`, true);

                if (confirmDelete) {
                    if (nodeInfo.parent) {
                        nodeInfo.parent.children = nodeInfo.parent.children.filter(child => child.id !== selectedNodeInListId);
                        console.log(`${currentListType} ${nodeInfo.node.lavelName} deleted from parent ${nodeInfo.parent.lavelName}.`);
                    } else if (treeData && treeData.id === selectedNodeInListId) {
                        // Deleting the root node (only if it matches the current list type, e.g., Organization)
                        treeData = null;
                        console.log(`Root ${currentListType} ${nodeInfo.node.lavelName} deleted. Tree is now empty.`);
                    }
                    selectedNodeInListId = null; // Clear list selection
                    selectedNodeId = null; // Also clear tree selection if it was the same node
                    renderTree(); // Re-render the tree

                    // After deleting, re-render the current list (if its parent still exists)
                    if (currentListParentNodeId) {
                        const parentNodeForList = findNodeById(currentListParentNodeId);
                        if (parentNodeForList) {
                            // If the list was showing ALL branches (from Organization click), re-render ALL branches
                            if (parentNodeForList.id === 1 && currentListType === 'Branch') {
                                renderNodeListPanel(findAllNodesByType(treeData, 'Branch'), 'Branch');
                            } else {
                                renderNodeListPanel(parentNodeForList.children || [], childTypeMapping[parentNodeForList.type]);
                            }
                        } else {

                            nodeListPanel.style.display = 'none'; // Hide if parent was deleted
                            currentListParentNodeId = null;
                        }
                    } else {
                        nodeListPanel.style.display = 'none'; // Hide if no parent context
                    }
                }
            } else {
                showMessage(`Selected item is not a ${currentListType} or not found for deletion.`);
                console.error(`Selected node in list not found for deletion. ID:`, selectedNodeInListId);
            }
        });

        // --- Save Node Listener (Handles both Tree and List CRUD saves) ---
        saveNodeBtn.addEventListener('click', () => {
            console.log("Save Changes button clicked.");
            // Basic form validation
            if (!formName.value || !formType.value || !formCreatedDate.value) {
                showMessage("Please fill in all required fields (Name, Type, Created Date).");
                return;
            }
            
            const nodeId = formNodeId.value;
            const parentId = formParentId.value; // Only used when adding from tree context
            const name = formName.value;
            const type = formType.value;
            const createdDate = formCreatedDate.value;
            const isActive = formIsActive.checked;
            const address = formAddress.value;
            const contactNumber = formContactNumber.value;

            const newNodeData = {
                id: nodeId===''?0: nodeId, // Generate new ID if adding
                name,
                type,
                parentId,
                createdDate,
                isActive,
                address,
                contactNumber,
                children: [] // New nodes start with no children
            };

            if (nodeId) { // Editing existing node (from tree or list)
                console.log("Attempting to edit node:", nodeId);
                
            } else { // Adding new node
                console.log("Attempting to add new node. Parent ID:", parentId);
                    DataSave(newNodeData);
                 
            }

            $('#crudNodeModal').modal('hide');
            renderTree();

            if (nodeListPanel.style.display === 'flex' && currentListType && currentListParentNodeId)
            {
                const parentNodeForList = findNodeById(currentListParentNodeId);
                if (parentNodeForList)
                {
                   
                    if (parentNodeForList.id === 1 && currentListType === 'Branch')
                    {
                        renderNodeListPanel(findAllNodesByType(treeData, 'Branch'), 'Branch');
                    } 
                    else
                    {
                        renderNodeListPanel(parentNodeForList.children || [], childTypeMapping[parentNodeForList.propertyId]);
                    }
                }
            } 
            else
            {
               
                nodeListPanel.style.display = 'none';
                currentListParentNodeId = null;
            }
        });


          // DataSave function
        function DataSave(newNodeData) {
            fetch('/Configure/Configure/InsertTreeNode', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(newNodeData)
            })
            .then(res => res.json())
            .then(data => {
                debugger;
                showMessages(data.message, data.status)   // just show the message
                    .then(() => {
                        $('#crudNodeModal').modal('hide');
                        setTimeout(() => location.reload(), 1000);
                    });
            })
            .catch(err => console.error(err));
        }

         function showMessage(message, isConfirm = false) {
             debugger;
            return new Promise((resolve) => {
                messageModalBody.textContent = message;
                messageModalFooter.innerHTML = ''; // Clear previous buttons

                if (isConfirm) {
                    debugger;
                    const yesBtn = document.createElement('button');
                    yesBtn.type = 'button';
                    yesBtn.classList.add('btn', 'btn-danger', 'rounded-pill');
                    yesBtn.textContent = 'Yes, Delete';
                    yesBtn.addEventListener('click', () => {
                        messageModal.hide();
                        resolve(true);
                    });

                    const noBtn = document.createElement('button');
                    noBtn.type = 'button';
                    noBtn.classList.add('btn', 'btn-secondary', 'rounded-pill', 'ms-2');
                    noBtn.textContent = 'No, Cancel';
                    noBtn.addEventListener('click', () => {
                        messageModal.hide();
                        resolve(false);
                    });

                    messageModalFooter.appendChild(noBtn);
                    messageModalFooter.appendChild(yesBtn);
                } else {
                    const okBtn = document.createElement('button');
                    okBtn.type = 'button';
                    okBtn.classList.add('btn', 'btn-primary', 'rounded-pill');
                    okBtn.textContent = 'OK';
                    okBtn.addEventListener('click', () => {
                        messageModal.hide();
                        resolve(true); // Resolve true for OK
                    });
                    messageModalFooter.appendChild(okBtn);
                }

               $('#messageModal').show();
            });
        }



    function showMessages(message, isConfirm = false) {
        return new Promise((resolve) => {
            const messageModalElement = document.getElementById('messageModal');
            const messageModalBody = document.getElementById('messageModalBody');
            const messageModalFooter = document.getElementById('messageModalFooter');

            // Set the message text and clear previous buttons
            messageModalBody.textContent = message;
            messageModalFooter.innerHTML = '';

            // Create Bootstrap modal instance
            const messageModal = new bootstrap.Modal(messageModalElement);

            if (isConfirm) {

                 // OK button
                const okBtn = document.createElement('button');
                okBtn.type = 'button';
                okBtn.classList.add('btn', 'btn-primary', 'rounded-pill');
                okBtn.textContent = 'OK';
                okBtn.addEventListener('click', () => {
                    messageModal.hide();
                    resolve(true);
                });

                messageModalFooter.appendChild(okBtn);

                // Yes / No buttons
                
            } else {
                const yesBtn = document.createElement('button');
                yesBtn.type = 'button';
                yesBtn.classList.add('btn', 'btn-danger', 'rounded-pill');
                yesBtn.textContent = 'Ok';
                yesBtn.addEventListener('click', () => {
                    messageModal.hide();
                    resolve(true);
                });

                const noBtn = document.createElement('button');
                noBtn.type = 'button';
                noBtn.classList.add('btn', 'btn-secondary', 'rounded-pill', 'ms-2');
                noBtn.textContent = 'No, Cancel';
                noBtn.addEventListener('click', () => {
                    messageModal.hide();
                    resolve(false);
                });

                messageModalFooter.appendChild(noBtn);
                messageModalFooter.appendChild(yesBtn);
               
            }

            // Show modal using Bootstrap API
            messageModal.show();
        });
    }

</script>